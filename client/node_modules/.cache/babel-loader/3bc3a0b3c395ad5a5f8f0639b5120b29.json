{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/merntestapp/TxtForm/client/src/components/edit.js\";\nimport React, { Component } from \"react\"; // This will require to npm install axios\n\nimport axios from \"axios\";\nimport { withRouter } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Edit extends Component {\n  // This is the constructor that stores the data.\n  constructor(props) {\n    super(props);\n    this.onChangeArticleTitle = this.onChangeArticleTitle.bind(this);\n    this.onChangeArticleDescription = this.onChangeArticleDescription.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      article_title: \"\",\n      article_description: \"\",\n      records: []\n    };\n  } // This will get the record based on the id from the database.\n\n\n  componentDidMount() {\n    axios.get(\"/api/record/\" + this.props.match.params.id).then(response => {\n      this.setState({\n        article_title: response.data.article_title,\n        article_description: response.data.article_description\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // These methods will update the state properties.\n\n\n  onChangeArticleTitle(e) {\n    this.setState({\n      article_title: e.target.value\n    });\n  }\n\n  onChangeArticleDescription(e) {\n    this.setState({\n      article_description: e.target.value\n    });\n  } // This function will handle the submission.\n\n\n  onSubmit(e) {\n    e.preventDefault();\n    const newEditedarticle = {\n      article_title: this.state.article_title,\n      article_description: this.state.article_description\n    };\n    console.log(newEditedarticle); // This will send a post request to update the data in the database.\n\n    axios.post(\"http://localhost:5000/update/\" + this.props.match.params.id, newEditedarticle).then(res => console.log(res.data));\n    this.props.history.push(\"/\");\n  } // This following section will display the update-form that takes the input from the user to update the data.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        align: \"center\",\n        children: \"Update Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Article's Title: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: this.state.article_title,\n            onChange: this.onChangeArticleTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Description: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            value: this.state.article_description,\n            onChange: this.onChangeArticleDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Update Record\",\n            className: \"btn btn-primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n} // You can get access to the history object's properties and the closest <Route>'s match via the withRouter\n// higher-order component. This makes it easier for us to edit our records.\n\n\nexport default _c = withRouter(Edit);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/admin/Desktop/merntestapp/TxtForm/client/src/components/edit.js"],"names":["React","Component","axios","withRouter","Edit","constructor","props","onChangeArticleTitle","bind","onChangeArticleDescription","onSubmit","state","article_title","article_description","records","componentDidMount","get","match","params","id","then","response","setState","data","catch","error","console","log","e","target","value","preventDefault","newEditedarticle","post","res","history","push","render"],"mappings":"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","sourcesContent":["import React,  {Component}  from \"react\";\n// This will require to npm install axios\nimport axios from \"axios\";\nimport { withRouter } from \"react-router\";\n\nclass Edit extends Component {\n  // This is the constructor that stores the data.\n  constructor(props) {\n    super(props);\n\n    this.onChangeArticleTitle = this.onChangeArticleTitle.bind(this);\n    this.onChangeArticleDescription = this.onChangeArticleDescription.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      article_title: \"\",\n      article_description: \"\",\n      records: [],\n    };\n  }\n  // This will get the record based on the id from the database.\n  componentDidMount() {\n    axios\n      .get(\"/api/record/\" + this.props.match.params.id)\n      .then((response) => {\n        this.setState({\n          article_title: response.data.article_title,\n          article_description: response.data.article_description,\n        });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  // These methods will update the state properties.\n  onChangeArticleTitle(e) {\n    this.setState({\n      article_title: e.target.value,\n    });\n  }\n\n  onChangeArticleDescription(e) {\n    this.setState({\n      article_description: e.target.value,\n    });\n  }\n\n  // This function will handle the submission.\n  onSubmit(e) {\n    e.preventDefault();\n    const newEditedarticle = {\n      article_title: this.state.article_title,\n      article_description: this.state.article_description,\n    };\n    console.log(newEditedarticle);\n\n    // This will send a post request to update the data in the database.\n    axios\n      .post(\n        \"http://localhost:5000/update/\" + this.props.match.params.id,\n        newEditedarticle\n      )\n      .then((res) => console.log(res.data));\n\n    this.props.history.push(\"/\");\n  }\n\n  // This following section will display the update-form that takes the input from the user to update the data.\n  render() {\n    return (\n      <div className=\"container\">\n        <h3 align=\"center\">Update Record</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <label>Article's Title: </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.article_title}\n              onChange={this.onChangeArticleTitle}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Description: </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.article_description}\n              onChange={this.onChangeArticleDescription}\n            />\n          </div>\n          \n          <br />\n\n          <div className=\"form-group\">\n            <input\n              type=\"submit\"\n              value=\"Update Record\"\n              className=\"btn btn-primary\"\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\n// You can get access to the history object's properties and the closest <Route>'s match via the withRouter\n// higher-order component. This makes it easier for us to edit our records.\n\nexport default withRouter(Edit);\n"]},"metadata":{},"sourceType":"module"}